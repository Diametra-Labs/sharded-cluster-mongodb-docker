
Los componentes son los siguientes de izquierda a derecha:
1. Cliente o app: Punto donde se hacen las peticiones iniciales al cluster de mongoDB.
2. Mongos Router: Encargados de direccionar la petición al shard correcto, checando previamente los metadatos del cluster en el replica set con los servidores de configuración para poder saber a que shard dirigir la petición.
3. Config servers o servidores de configuración: Para garantizar redundancia, los config servers son un replica set con 3 miembros (uno primario y dos secundarios). Este componente contiene los metadatos del cluster.
4.  Shard: Al igual que los config servers, cada shard es un replica set con 3 miembros. Estos componentes se encargan de almacenar los datos. Ejemplo: Si hay 2 shards, los datos se distribuyen.
Esta arquitectura garantiza una escalabilidad sencilla, ya que escala horizontalmente mediante el agregamiento de shards que se añaden facilemente al cluster.

PASO A PASO
Elegí docker como método de “deployment”, ya que permite la rápida experimentación en un cualquier entorno entre muchas instancias de mongo (11 en nuestro caso), además de permitir llegar a producción sin muchos problemas con herramientas como docker-swarm o Kubernetes. A continuación un paso a paso del proceso para desplegar un cluster de mongoDB con docker:
1. Instalar docker en la máquina.
2. Abrir la terminal y correr el comando: docker network create mynet para crear la red donde vivirá el cluster.
3. Crear contenedores de config-servers: 
En la terminal, ir a la carpeta sharding/config-server de la tarea y correr el comando: docker-compose up -d, lo que levantará 3 contenedores con mongodb instalado y mongod corriendo en el daemon de docker con la siguiente configuración: mongod --configsvr --replSet cfgrs1 --port 27017 --dbpath /data/db. Correr el comando: docker container ls para ver los contenedores activos (Se deberían de ver 3)
4. Agregar contenedores nuevos a red de docker:
Añade los contenedores a la red de docker mynet con el comando en la terminal: docker network connect mynet $nombre_de_contenedor. Nuestros contenedores se llaman cfgsvr1, cfgsvr2 y cfgsvr3, así que repite el comando 3 veces. Corrobora que los contenedores están en la red, primero corre el comando docker network ls, lo que dará el listado de las redes y el $network_ID de nuestra red, valor necesario para el siguiente paso. Corre el comando docker inspect $network_id, y en el json que regresa, en el valor de “Containers” anota el valor de “Ipv4Address” de los 3 contenedores, ya que lo necesitarás para el siguiente paso.
5. Convertir los config-servers en un replica set con 3 miembros:
Con cualquiera de los 3 valores $Ipv4Address del paso anterior, regresar a la terminal y correr el comando mongo –host $Ipv4Address –port 27017. Esto dará acceso al mongoShell dentro del contenedor elegido mediante el IP address. Ya ahí correr el siguiente comando para inicializar el replica set: rs.initiate(  {
    _id: "cfgrs1",
    configsvr: true,
    members: [
      { _id : 0, host : "$Ipv4AddressContainer1:40005" },
      { _id : 1, host : "$Ipv4AddressContainer2:40006" },
      { _id : 2, host : "$Ipv4AddressContainer3:40007" }
    ]})
. Posteriormente correr el comando rs.status() , y en el valor “members”, deben haber 3 miembros.
6. Crear contenedores de shard1 como replica set:
Repetir los pasos 3, 4 y 5 con dos diferencias. En el paso 3, la carpeta ahora es sharding/shard1 . La segunda diferencia es que en el paso 5  el comando para inicializar un replica set desde el mongoShell es:
rs.initiate(  {
    _id: "shard1rs,
    members: [
      { _id : 0, host : "$Ipv4AddressContainer1:50001" },
      { _id : 1, host : "$Ipv4AddressContainer2:50002" },
      { _id : 2, host : "$Ipv4AddressContainer3:50003" }
    ]})
. Este paso puede repetirse para cuandos shards se deseen o requieran.
7. Crear contenedor con mongos router:
Repetir el paso 3 en la carpeta sharding/mongos, lo que inicializará un contenedor con mongodb instalado y el paso 4. Ahora para acceder al contenedor e inicializar el proceso de mongos router, correremos el comando docker exec -it mongos /bin/bash. Desde la terminal del contenedor corremos el comando: mongos --configdb cfgrs1/$Ipv4AddressConfigServer1:40005,$Ipv4AddressConfigServer2:40006,$Ipv4AddressConfigServer3:40007 --bind_ip 0.0.0.0 (por ahora) --port 27017 (si no funciona --27018), esto incializará el proceso del servidor de mongo router pero aun hay que configurar el shard.
8. Configurar shard (o shards) desde el mongoShell del mongosRouter:
Con el proceso anterior corriendo, abrir otra terminal y correr el comando docker exec -it mongos /bin/bash para acceder a la terminal del contenedor con el proceso de mongos router corriendo. Para conectarnos al mongoShell corremos el comando mongo --host 127.0.0.1 port --27017 (o puerto elegido) lo que debe llevarte a un mongoShell que dice mongos.Ahora si, a ageregar el shard. Desde ahí correr el comando sh.addShard(“shard1rs/$Ipv4AddressShardServer1:50001,$Ipv4AddressShardServer2:50002,$Ipv4AddressShardServer3:50003”)y checar que en el json de la respuesta, en el campo “status”, tenga de valor ok.Ahora para corroborar que el shard funcione correr sh.status(), y el shard ya debe tener miembros y estar activo.
Aquí una foto de 7 contenedores corriendo (3 de config servers, 3 del shard y un mongos router)


